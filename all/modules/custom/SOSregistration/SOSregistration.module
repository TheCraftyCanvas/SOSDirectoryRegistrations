<?php
/**
 * @file
 * SOS Registration module overrides user-registration form.
 */


 /**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function SOSregistration_help($path, $arg) {
  switch ($path) {
    case "admin/help#SOSregistration":
      return '<p>'.  t("Customizes the SOS membership registration forms") .'</p>';
      break;
  }
}



/**
 * Custom User Registration form validation function.
 * hook_form_FORM_ID_validate for User Registration form
 *
 */
function SOSregistration_form_user_register_form_validate(&$form, &$form_state, $form_id) {
  $username3 = $form_state['values']['username3'];
  if ($username3 != "") {
    form_set_error('username3', t('Sorry something has gone wrong. Please try again.'));
    return false;
  }
  $email = $form_state['values']['mail'];
  if ( ( strpos($email, '@netcourrier') != false) || ( strpos($email, '@drupaler.org') != false) ) {
    form_set_error('mail', t('Sorry something has gone wrong. Please try again.'));
    return false;
  }
}


/**
 * Custom User Registration form mods function.
 * hook_form_FORM_ID_alter for User Registration form
 *
 */
function SOSregistration_form_user_register_form_alter(&$form, &$form_state, $form_id) {

//    echo('<script>console.log("User registration form: hook_form_alter called via SOSregistration module");</script>');

    $form['actions']['submit']['#weight'] = 50;


//    array_unshift($form['#submit'], 'profile2_form_submit_handler');

/*    if (($k = array_search('profile2_form_submit_handler', $form['#submit'])) !== FALSE) {
         unset($form['#submit'][$k]);
         $form_state['profile2_form_submit_handler'] = TRUE;
       }
*/
    $form['#submit'][] = 'profile2_form_submit_handler';
    $uid = $form_state['user']->uid;
    //watchdog('SOSregistration', t('profile2_form_submit_handler returned, form state uid is %1.', array('%1'=>$form_state['user']->uid)), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    $form['#submit'][] = 'SOSregistration_syncLocationContent';
    $form['#submit'][] = 'new_profile_form_submitted';

}


function new_profile_form_submitted($form, &$form_state) {
    echo '<script>alert();</script>';
    $form_state['redirect'] = 'node/75';
}

/**
 * Custom sync trigger function.
 * hook_form_FORM_ID_alter for User Profile form
 * Triggers database sync of location record from database profile fields
 *
 */

function SOSregistration_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
//  dpm("SOS User Profile Form detected");

//  watchdog('SOSregistration', t('User profile form: hook_form_alter called via SOSregistration module.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

  $form['#submit'][] = 'profile2_form_submit_handler';
  //watchdog('SOSregistration', t('profile2_form submit handler assigned.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

  $form['#submit'][] = 'SOSregistration_syncLocationContent';
//  watchdog('SOSregistration', t('sync location handler assigned', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

  $form['#submit'][] = 'updated_profile_form_submitted';

} //function SOSregistration_form_user_profile_form_alter(&$form, &$form_state, $form_id) {


function updated_profile_form_submitted(&$form, &$form_state) {
//  watchdog('SOSregistration', t('user profile update submit handler called.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    $form_state['redirect'] = 'node/76';
}



/**
 * Custom sync function.
 *
 * Sync posts from database profile fields to location fields filtered by User ID
 *
 */
function SOSregistration_syncLocationContent(&$form, &$form_state) {
//  echo('<script>console.log("sos_membership syncContent function called")</script>');

  $uid = $form_state['user']->uid;

/*  //if it is an administrator, then use the user id in the url structure
  if( in_array( array('list-administrator','administrator'), $user->roles) )
  {
    echo('<script>alert("Administrator or List Administrator role detected.")</script>');
    $request_parts = explode('/', $_SERVER['REQUEST_URI']);
    $user_ID = intval(array_pop($request_parts));
    echo('<script>console.log("User id detected from url as:"' . $user_ID . ')</script>');
    $uid = $user_ID;
  }
  // otherwise use the user id of the signed in user.
*/


  //Use Database API to retrieve profile and update location record for user.
  //  watchdog('SOSregistration', t('Member user id detected as %uid.  Proceeding to sync/update profile and location records.', array('%uid'=>$uid)), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);


  $query1 = "
    SELECT
    users.name AS Name,
    users.uid AS UserID,
    profile.pid AS ProfileID,
    field_data_field_member_name_part2.field_member_name_part2_value AS LastName,
    field_data_field_member_name_part1.field_member_name_part1_value AS FirstName,
    field_data_field_organization_name.field_organization_name_value AS Company,
    field_data_field_street_address.field_street_address_value AS StreetAddress,
    field_data_field_street_address2.field_street_address2_value AS StreetAddress2,
    field_data_field_city.field_city_value AS City,
    field_data_field_state.field_state_value AS State,
    field_data_field_zip.field_zip_value AS Zip,
    field_data_field_organization_pvt.field_organization_pvt_value AS CompanyAlt,
    field_data_field_street_address_pvt.field_street_address_pvt_value AS StreetAddressAlt,
    field_data_field_street_address2_pvt.field_street_address2_pvt_value AS StreetAddress2Alt,
    field_data_field_city_state_zip_pvt.field_city_state_zip_pvt_value AS CityAlt,
    field_data_field_state_pvt.field_state_pvt_value AS StateAlt,
    field_data_field_zip_code_pvt.field_zip_code_pvt_value AS ZipAlt
    FROM users
    LEFT JOIN profile ON users.uid = profile.uid AND profile.type = 'main'
    LEFT JOIN field_data_field_member_name_part2 ON profile.pid = field_data_field_member_name_part2.entity_id
    LEFT JOIN field_data_field_member_name_part1 ON profile.pid = field_data_field_member_name_part1.entity_id
    LEFT JOIN field_data_field_organization_name ON profile.pid = field_data_field_organization_name.entity_id
    LEFT JOIN field_data_field_street_address ON profile.pid = field_data_field_street_address.entity_id
    LEFT JOIN field_data_field_street_address2 ON profile.pid = field_data_field_street_address2.entity_id
    LEFT JOIN field_data_field_city ON profile.pid = field_data_field_city.entity_id
    LEFT JOIN field_data_field_state ON profile.pid = field_data_field_state.entity_id
    LEFT JOIN field_data_field_zip ON profile.pid = field_data_field_zip.entity_id
    LEFT JOIN field_data_field_organization_pvt ON profile.pid = field_data_field_organization_pvt.entity_id
    LEFT JOIN field_data_field_street_address_pvt ON profile.pid = field_data_field_street_address_pvt.entity_id
    LEFT JOIN field_data_field_street_address2_pvt ON profile.pid = field_data_field_street_address2_pvt.entity_id
    LEFT JOIN field_data_field_city_state_zip_pvt ON profile.pid = field_data_field_city_state_zip_pvt.entity_id
    LEFT JOIN field_data_field_state_pvt ON profile.pid = field_data_field_state_pvt.entity_id
    LEFT JOIN field_data_field_zip_code_pvt ON profile.pid = field_data_field_zip_code_pvt.entity_id
    WHERE (users.uid = " . $uid . ")
  ";
  $result = db_query($query1);

  print_r($result);
  
  $location_Name = $location_NameAlt = "";
  $location_StreetAddress = $location_StreetAddressAlt = "";
  $location_StreetAddress2 = $location_StreetAddress2Alt = "";
  $location_City = $location_CityAlt = "";
  $location_State = $location_StateAlt = "";
  $location_Zip = $location_ZipAlt = "";
  $location_Country = $location_CountryAlt = "";

  // a location listing can only exist if a street address exists with city, state, zip.  Should any of those fields be empty, then the location record would be incomplete.
  $bool_location_invalid = true;
  $bool_location2_invalid = true;

  foreach ($result as $record) {
    if($record->Company <> "") {
      $location_Name = $record->Company;
    } else  {
      $location_Name = "";
      $bool_location_invalid = true;
    }
    if($record->StreetAddress <> "") {
      $location_StreetAddress = $record->StreetAddress;
      $bool_location_invalid = false;
      $bool_location_invalid = ($bool_location_invalid && true);
    }
    if($record->StreetAddress2 <> "") {
      $location_StreetAddress2 = $record->StreetAddress2;
      $bool_location_invalid = false;
    } else  {
      $location_StreetAddress2 = "";
      $bool_location_invalid = ($bool_location_invalid && true);
    }
    if($record->City <> "") {
      $location_City = $record->City;
      $bool_location_invalid = false;
    } else  {
      $location_City = "";
      $bool_location_invalid = ($bool_location_invalid && true);
    }
    if($record->State <> "") {
      $location_State = $record->State;
    } else  {
      $location_State = "";
      $bool_location_invalid = ($bool_location_invalid && true);
    }
    if($record->Zip <> "") {
      $location_Zip = $record->Zip;
      $bool_location_invalid = false;
    } else {
      $location_Zip = "";
      $bool_location_invalid = ($bool_location_invalid && true);
    }
    if(!($bool_location_invalid))
      $location_Country = 'us';



    if($record->CompanyAlt <> "") {
      $location_NameAlt = $record->CompanyAlt;
      $bool_location2_invalid = false;
    } else  {
      $location_NameAlt = "";
    }
    if($record->StreetAddressAlt <> "") {
      $location_StreetAddressAlt = $record->StreetAddressAlt;
      $bool_location2_invalid = false;
    }
    if($record->StreetAddress2Alt <> "") {
      $location_StreetAddress2Alt = $record->StreetAddress2Alt;
    } else  {
      $location_StreetAddress2Alt = "";
    }
    if($record->CityAlt <> "") {
      $location_CityAlt = $record->CityAlt;
      $bool_location2_invalid = false;
    } else  {
      $location_CityAlt = "";
      $bool_location2_invalid = ($bool_location2_invalid && true);
    }
    if($record->StateAlt <> "") {
      $location_StateAlt = $record->StateAlt;
    } else  {
      $location_StateAlt = "";
      $bool_location2_invalid = ($bool_location2_invalid && true);
    }
    if($record->ZipAlt <> "") {
      $location_ZipAlt = $record->ZipAlt;
      $bool_location2_invalid = false;
    } else {
      $location_ZipAlt = "";
      $bool_location2_invalid = ($bool_location2_invalid && true);
    }
    if(!($bool_location2_invalid))
      $location_CountryAlt = 'us';
  } //end foreach


  if(!($bool_location_invalid)) {
/*
    watchdog('SOSregistration', t('Valid primary location record provided', array() ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('Location Name: %1', array('%1'=>$location_Name) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('Location Address1: %1', array('%1'=>$location_StreetAddress) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('Location Address2: %1', array('%1'=>$location_StreetAddress2) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('Location City: %1', array('%1'=>$location_City) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('Location State: %1', array('%1'=>$location_State) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('Location Zip: %1', array('%1'=>$location_Zip) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('Location Country: %1', array('%1'=>$location_Country) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
*/
} else {

  //watchdog('SOSregistration', t('No primary location detected in profile', array() ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

  }
  if(!($bool_location2_invalid)) {
/*
    watchdog('SOSregistration', t('Valid secondary location record provided', array() ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

    watchdog('SOSregistration', t('Valid secondary location record provided', array() ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('2ndary Location Name: %1', array('%1'=>$location_NameAlt) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('2ndary Location Address1: %1', array('%1'=>$location_StreetAddressAlt) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('2ndary Location Address2: %1', array('%1'=>$location_StreetAddress2Alt) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('2ndary Location City: %1', array('%1'=>$location_CityAlt) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('2ndary Location State: %1', array('%1'=>$location_StateAlt) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('2ndary Location Zip: %1', array('%1'=>$location_ZipAlt) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    watchdog('SOSregistration', t('2ndary Location Country: %1', array('%1'=>$location_CountryAlt) ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
*/
  } else {

  //watchdog('SOSregistration', t('No secondary location detected in profile', array() ), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

  }


  // after pulling profile data, check to see if location instance(s) exist(s) for this user; if so- delete them.
  //watchdog('SOSregistration', t('Proceeding to check for existing location assigned to this user.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

  $query = '
    SELECT
    location_instance.uid AS UserID,
    location_instance.lid AS LocationID
    FROM location_instance
    WHERE (location_instance.uid = ' . $uid . ')
  ';
  $lid_result = db_query($query);

  $locationID = array();
  $i = 0;
  foreach ($lid_result as $record) {
    $locationID[$i] = $record->LocationID;
    $i++;
  }
  if(count($locationID) > 0) {
    foreach ($locationID as $index) {
      SOSregistration_deleteLocationInstance($index);
    }
  } else {
//    watchdog('SOSregistration', t('No prior location records exist.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
  }

  // check to see if profile has valid primary and/or secondary locations. If they do, perform SQL record insertions.
  if(!($bool_location_invalid)) {
    //watchdog('SOSregistration', t('Inserting new primary location record.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    SOSregistration_insertLocation($uid, $location_Name, $location_StreetAddress, $location_StreetAddress2, $location_City, $location_State, $location_Zip, $location_Country);
  }
  if(!($bool_location2_invalid)) {
    //watchdog('SOSregistration', t('Inserting new secondary location record.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    SOSregistration_insertLocation($uid, $location_NameAlt, $location_StreetAddressAlt, $location_StreetAddress2Alt, $location_CityAlt, $location_StateAlt, $location_ZipAlt, $location_CountryAlt);
  }

}  // function SOSregistration_syncLocationContent()


/**
 * Custom Location insertion function.
 *
 * inserts location data associated with a user
 * @arguments: user id, location data from profile
 * performs two insert queries- 1) insert new location, 2) assign relationship to user
 *
 */
function SOSregistration_insertLocation($uid, $org, $addr1, $addr2, $city, $state, $zip, $country)
{
  //watchdog('SOSregistration', t('Inserting new location record.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    $insertQuery = db_insert('location')
    ->fields(array(
      'name' => $org,
      'street' => $addr1,
      'additional' => $addr2,
      'city' => $city,
      'province' => $state,
      'postal_code' => $zip,
      'country' => $country,
      'source' => 4,
    ))
    ->execute();

    $locationID = $insertQuery;

    $insertQuery = db_insert('location_instance')
    ->fields(array(
      'uid' => $uid,
      'lid' => $locationID,
    ))
    ->execute();

} // function SOSregistration_insertLocation($uid, $org, $addr1, $addr2, $city, $state, $zip, $country)



/**
 * Custom Location removal function.
 *
 * deletes location data based on location ID (primary key)
 * @arguments: locationID
 * performs two deletion queries- 1) location_instance table, 2) location table
 *
 */
function SOSregistration_deleteLocationInstance($index) {
   // watchdog('SOSregistration', t('Deleting prior location record.', array()), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
//  echo('<script>console.log("Proceeding to remove location record #' . $index . '");</script>');
  $deleteQuery1 = db_delete('location_instance')
    ->condition('lid', $index)
    ->execute();
  $deleteQuery2 = db_delete('location')
    ->condition('lid', $index)
    ->execute();
//  echo('<script>console.log("Prior location record removed from both location_instance and location tables")</script>');
} // function SOSregistration_deleteLocationInstance($index)


